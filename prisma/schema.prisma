generator client {
  provider  = "prisma-client-js"
  output    = "../generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  user_id               String            @id @unique @default(nanoid())
  email                 String            @unique
  password              String
  name                  String
  profile_image         String?
  totp_secret           String?
  is_2fa_active         Boolean           @default(false)
  created_at            DateTime          @default(now())
  updated_at            DateTime          @updatedAt
  class_owner           Class[]
  class_member          ClassMember[]
  assignments           ClassAssignments[]
  submited_assignments  SubmissionResult[]
  quiz                  ClassQuiz[]
  submited_quiz         QuizResult[]
  post                  ClassPost[]
  comment               Comment[]
  files                 File[]
  chat                  PrivateChatUser[]
  messages              PrivateMessage[]
  group_chat            GroupChatUser[]
  group_message         GroupMessage[]
}

model Class {
  class_id              String            @id @unique @default(nanoid())
  name                  String
  description           String
  class_code            String            @unique
  class_members         ClassMember[]
  class_timeline        ClassPost[]
  class_assignments     ClassAssignments[]
  class_quiz            ClassQuiz[]
  class_topic           ClassTopic[]
  invitation            Invitation[]
  group_chat            GroupChat[]
  created_at            DateTime          @default(now())
  updated_at            DateTime          @updatedAt

  owner_user_id         String
  class_owner           User              @relation(fields: [owner_user_id], references: [user_id], onDelete: Cascade)
}

model Comment {
  comment_id            String            @id @unique @default(nanoid())
  content               String
  created_at            DateTime          @default(now())
  updated_at            DateTime          @updatedAt

  user_id               String
  user                  User              @relation(fields: [user_id], references: [user_id])

  post_id               String?
  post                  ClassPost?        @relation(fields: [post_id], references: [post_id])
  assignments_id        String?
  assignments           ClassAssignments? @relation(fields: [assignments_id], references: [assignments_id])
  assignments_result_id String?
  assignments_result    SubmissionResult? @relation(fields: [assignments_result_id], references: [result_id])
  quiz_id               String?
  quiz                  ClassQuiz?        @relation(fields: [quiz_id], references: [quiz_id])
  quiz_result_id        String?
  quiz_result           QuizResult?       @relation(fields: [quiz_result_id], references: [result_id])
}

model ClassTopic {
  topic_id              String            @id @unique @default(nanoid())
  name                  String

  class_id              String
  class                 Class             @relation(fields: [class_id], references: [class_id], onDelete: Cascade)

  assignments           ClassAssignments[]
  quizzes               ClassQuiz[]
}

model ClassMember {
  class_member_id       String            @id @unique @default(nanoid())
  role                  String            @default("MEMBER")
  created_at            DateTime          @default(now())
  updated_at            DateTime          @updatedAt

  user_id               String
  class_code            String
  user                  User              @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
  class                 Class             @relation(fields: [class_code], references: [class_code], onDelete: Cascade)

  @@index([user_id, class_code])
  @@unique([user_id, class_code])
}

model ClassPost {
  post_id               String            @id @unique @default(nanoid())
  content               String
  attachment            String[]          @db.Text
  comment               Comment[]
  created_at            DateTime          @default(now())
  updated_at            DateTime          @updatedAt

  class_id              String
  class                 Class             @relation(fields: [class_id], references: [class_id], onDelete: Cascade)
  user_id               String
  user                  User              @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
}

model ClassAssignments {
  assignments_id        String            @id @unique @default(nanoid())
  title                 String
  content               String
  attachment            String[]          @db.Text
  start_date            DateTime
  due_date              DateTime
  is_available          Boolean           @default(true)
  comment               Comment[]
  result                SubmissionResult[]
  created_at            DateTime          @default(now())
  updated_at            DateTime          @updatedAt

  class_id              String
  class                 Class             @relation(fields: [class_id], references: [class_id], onDelete: Cascade)
  user_id               String
  user                  User              @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
  topic_id              String
  topic                 ClassTopic        @relation(fields: [topic_id], references: [topic_id], onDelete: Cascade)
}

model SubmissionResult {
  result_id             String            @id @unique @default(nanoid())
  attachment            String[]          @db.Text
  point                 Int               @default(0)
  comment               Comment[]
  submited_at           DateTime          @default(now())
  created_at            DateTime          @default(now())
  updated_at            DateTime          @updatedAt

  assignments_id        String
  assignments           ClassAssignments  @relation(fields: [assignments_id], references: [assignments_id], onDelete: Cascade)
  user_id               String
  user                  User              @relation(fields: [user_id], references: [user_id], onDelete: Cascade)

  @@index([user_id, assignments_id])
  @@unique([user_id, assignments_id])
}

model ClassQuiz {
  quiz_id               String            @id @unique @default(nanoid())
  title                 String
  description           String?     
  attachment            String[]          @db.Text
  start_date            DateTime
  due_date              DateTime
  is_available          Boolean           @default(true)
  quiz_content          QuizContent[]
  result                QuizResult[]
  comment               Comment[]
  created_at            DateTime          @default(now())
  updated_at            DateTime          @updatedAt

  class_id              String
  class                 Class             @relation(fields: [class_id], references: [class_id], onDelete: Cascade)

  user_id               String
  user                  User              @relation(fields: [user_id], references: [user_id], onDelete: Cascade)

  topic_id              String
  topic                 ClassTopic        @relation(fields: [topic_id], references: [topic_id], onDelete: Cascade)
}

model QuizContent {
  quiz_content_id       String            @id @unique @default(nanoid())
  question              String
  attachment            String[]          @db.Text
  created_at            DateTime          @default(now())
  updated_at            DateTime          @updatedAt

  quiz_id               String
  quiz                  ClassQuiz         @relation(fields: [quiz_id], references: [quiz_id], onDelete: Cascade)

  options               QuizOption[]

  QuizAnswer            QuizAnswer[]
}

model QuizOption {
  option_id             String            @id @unique @default(nanoid())
  text                  String
  is_correct            Boolean           @default(false)

  quiz_content_id       String
  quiz_content          QuizContent       @relation(fields: [quiz_content_id], references: [quiz_content_id], onDelete: Cascade)

  QuizAnswer            QuizAnswer[]
}

model QuizResult {
  result_id             String            @id @unique @default(nanoid())
  point                 Int               @default(0)
  comment               Comment[]
  submited_at           DateTime          @default(now())
  created_at            DateTime          @default(now())
  updated_at            DateTime          @updatedAt

  quiz_id               String
  quiz                  ClassQuiz         @relation(fields: [quiz_id], references: [quiz_id], onDelete: Cascade)

  user_id               String
  user                  User              @relation(fields: [user_id], references: [user_id], onDelete: Cascade)

  answers               QuizAnswer[]

  @@index([user_id, quiz_id])
  @@unique([user_id, quiz_id])
}

model QuizAnswer {
  answer_id             String             @id @unique @default(nanoid())
  quiz_content_id       String
  quiz_content          QuizContent        @relation(fields: [quiz_content_id], references: [quiz_content_id], onDelete: Cascade)

  option_id             String
  option                QuizOption         @relation(fields: [option_id], references: [option_id], onDelete: Cascade)

  result_id             String
  result                QuizResult         @relation(fields: [result_id], references: [result_id], onDelete: Cascade)
}

model File {
  file_id               String             @id @unique @default(nanoid())
  filename              String
  url                   String
  mimetype              String?
  size                  Int?
  uploaded_by           String

  user                  User               @relation(fields: [uploaded_by], references: [user_id])
  created_at            DateTime           @default(now())
}

model Invitation {
  id                    String             @id @unique @default(nanoid())
  email                 String
  class_id              String
  token                 String             @unique
  status                String             @default("pending") // pending | expired
  created_at            DateTime           @default(now())
  expires_at            DateTime

  class                 Class              @relation(fields: [class_id], references: [class_id], onDelete: Cascade)
}

model PrivateChat {
  chat_id               String             @id @unique @default(nanoid())
  created_at            DateTime           @default(now())
  last_message_at       DateTime?

  messages              PrivateMessage[]
  users                 PrivateChatUser[]
}

model PrivateChatUser {
  id                    String             @id @unique @default(nanoid())
  chat_id               String
  user_id               String

  chat                  PrivateChat        @relation(fields: [chat_id], references: [chat_id], onDelete: Cascade)
  user                  User               @relation(fields: [user_id], references: [user_id], onDelete: Cascade)

  @@unique([chat_id, user_id])
}

model PrivateMessage {
  message_id            String             @id @unique @default(nanoid())
  chat_id               String
  sender_id             String
  message               String
  created_at            DateTime           @default(now())
  updated_at            DateTime           @updatedAt
  read_at               DateTime?

  chat                  PrivateChat        @relation(fields: [chat_id], references: [chat_id], onDelete: Cascade)
  sender                User               @relation(fields: [sender_id], references: [user_id], onDelete: Cascade)
}

model GroupChat {
  group_chat_id         String             @id @unique @default(nanoid())
  created_at            DateTime           @default(now())
  last_message_at       DateTime?
  class_id              String
  
  class                 Class              @relation(fields: [class_id], references: [class_id], onDelete: Cascade)
  user                  GroupChatUser[]
  message               GroupMessage[]
}

model GroupChatUser {
  id                    String             @id @unique @default(nanoid())
  group_chat_id         String
  user_id               String

  chat                  GroupChat          @relation(fields: [group_chat_id], references: [group_chat_id], onDelete: Cascade)
  user                  User               @relation(fields: [user_id], references: [user_id], onDelete: Cascade)

  @@unique([group_chat_id, user_id])
}

model GroupMessage {
  id                    String             @id @unique @default(nanoid())
  group_chat_id         String
  sender_id             String
  message               String
  created_at            DateTime           @default(now())
  read_at               DateTime?

  chat                  GroupChat          @relation(fields: [group_chat_id], references: [group_chat_id], onDelete: Cascade)
  sender                User               @relation(fields: [sender_id], references: [user_id], onDelete: Cascade)
}
